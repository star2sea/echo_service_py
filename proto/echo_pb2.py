# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: echo.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import service as _service
from google.protobuf import service_reflection
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='echo.proto',
  package='echo',
  serialized_pb=_b('\n\necho.proto\x12\x04\x65\x63ho\"\x06\n\x04Void\"\x1e\n\x0b\x45\x63hoRequest\x12\x0f\n\x07message\x18\x01 \x02(\t\"\x1f\n\x0c\x45\x63hoResponse\x12\x0f\n\x07message\x18\x01 \x02(\t2A\n\x11\x45\x63hoServerService\x12,\n\x0b\x65\x63ho_server\x12\x11.echo.EchoRequest\x1a\n.echo.Void2B\n\x11\x45\x63hoClientService\x12-\n\x0b\x65\x63ho_client\x12\x12.echo.EchoResponse\x1a\n.echo.VoidB\x03\x90\x01\x01')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_VOID = _descriptor.Descriptor(
  name='Void',
  full_name='echo.Void',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=20,
  serialized_end=26,
)


_ECHOREQUEST = _descriptor.Descriptor(
  name='EchoRequest',
  full_name='echo.EchoRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='message', full_name='echo.EchoRequest.message', index=0,
      number=1, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=28,
  serialized_end=58,
)


_ECHORESPONSE = _descriptor.Descriptor(
  name='EchoResponse',
  full_name='echo.EchoResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='message', full_name='echo.EchoResponse.message', index=0,
      number=1, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=60,
  serialized_end=91,
)

DESCRIPTOR.message_types_by_name['Void'] = _VOID
DESCRIPTOR.message_types_by_name['EchoRequest'] = _ECHOREQUEST
DESCRIPTOR.message_types_by_name['EchoResponse'] = _ECHORESPONSE

Void = _reflection.GeneratedProtocolMessageType('Void', (_message.Message,), dict(
  DESCRIPTOR = _VOID,
  __module__ = 'echo_pb2'
  # @@protoc_insertion_point(class_scope:echo.Void)
  ))
_sym_db.RegisterMessage(Void)

EchoRequest = _reflection.GeneratedProtocolMessageType('EchoRequest', (_message.Message,), dict(
  DESCRIPTOR = _ECHOREQUEST,
  __module__ = 'echo_pb2'
  # @@protoc_insertion_point(class_scope:echo.EchoRequest)
  ))
_sym_db.RegisterMessage(EchoRequest)

EchoResponse = _reflection.GeneratedProtocolMessageType('EchoResponse', (_message.Message,), dict(
  DESCRIPTOR = _ECHORESPONSE,
  __module__ = 'echo_pb2'
  # @@protoc_insertion_point(class_scope:echo.EchoResponse)
  ))
_sym_db.RegisterMessage(EchoResponse)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\220\001\001'))

_ECHOSERVERSERVICE = _descriptor.ServiceDescriptor(
  name='EchoServerService',
  full_name='echo.EchoServerService',
  file=DESCRIPTOR,
  index=0,
  options=None,
  serialized_start=93,
  serialized_end=158,
  methods=[
  _descriptor.MethodDescriptor(
    name='echo_server',
    full_name='echo.EchoServerService.echo_server',
    index=0,
    containing_service=None,
    input_type=_ECHOREQUEST,
    output_type=_VOID,
    options=None,
  ),
])

EchoServerService = service_reflection.GeneratedServiceType('EchoServerService', (_service.Service,), dict(
  DESCRIPTOR = _ECHOSERVERSERVICE,
  __module__ = 'echo_pb2'
  ))

EchoServerService_Stub = service_reflection.GeneratedServiceStubType('EchoServerService_Stub', (EchoServerService,), dict(
  DESCRIPTOR = _ECHOSERVERSERVICE,
  __module__ = 'echo_pb2'
  ))



_ECHOCLIENTSERVICE = _descriptor.ServiceDescriptor(
  name='EchoClientService',
  full_name='echo.EchoClientService',
  file=DESCRIPTOR,
  index=1,
  options=None,
  serialized_start=160,
  serialized_end=226,
  methods=[
  _descriptor.MethodDescriptor(
    name='echo_client',
    full_name='echo.EchoClientService.echo_client',
    index=0,
    containing_service=None,
    input_type=_ECHORESPONSE,
    output_type=_VOID,
    options=None,
  ),
])

EchoClientService = service_reflection.GeneratedServiceType('EchoClientService', (_service.Service,), dict(
  DESCRIPTOR = _ECHOCLIENTSERVICE,
  __module__ = 'echo_pb2'
  ))

EchoClientService_Stub = service_reflection.GeneratedServiceStubType('EchoClientService_Stub', (EchoClientService,), dict(
  DESCRIPTOR = _ECHOCLIENTSERVICE,
  __module__ = 'echo_pb2'
  ))


# @@protoc_insertion_point(module_scope)
